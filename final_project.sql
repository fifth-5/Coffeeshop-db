use coffee_shop;

-- SUBQUERY --

/* this is a query that retrieves employees who have a salary greater than the average salary of all employees.
(This is a non-correlated subquery because it runs independently before the main query executes) */

SELECT employee_id, first_name, last_name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);

-- UPDATABLE SINGLE TABLE VIEW --

/* this is an updatable view for employees that allows modifications. */

/* Step 1: Create the Updatable View */
DROP VIEW IF EXISTS vw_employee_salary_info;
CREATE VIEW vw_employee_salary_info AS
SELECT employee_id, first_name, last_name, salary
FROM employees
WHERE salary > 25000;

/* step 2: Query the View Before Update */
SELECT * FROM vw_employee_salary_info;

/* step 3: Update an Employeeâ€™s Salary Through the View */
UPDATE vw_employee_salary_info
SET salary = 35000
WHERE employee_id = 5;

/* step 4: Query the View After Update */
SELECT * FROM vw_employee_salary_info;

-- STORED PROCEDURE --

DROP PROCEDURE IF EXISTS sp_calculate_order_revenue;
DELIMITER //

CREATE PROCEDURE sp_calculate_order_revenue()
BEGIN
    -- Variables
    DECLARE done INT DEFAULT 0;
    DECLARE order_total DECIMAL(7,2);
    DECLARE order_discount DECIMAL(7,2);
    DECLARE total_revenue DECIMAL(10,2) DEFAULT 0;
    DECLARE cur CURSOR FOR SELECT total_price FROM orders;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO order_total;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Discount 10% for large orders ($25+)
        IF order_total >= 25 THEN
            SET order_discount = order_total * 0.10;
        ELSE
            SET order_discount = 0;
        END IF;

        SET total_revenue = total_revenue + (order_total - order_discount);
    END LOOP;

    CLOSE cur;
    
    SELECT CONCAT('Total Revenue after discounts: $', total_revenue) AS Revenue;
END //

DELIMITER ;

CALL sp_calculate_order_revenue();

-- STORED FUNCTION --

-- Drop the procedure if it already exists
DROP PROCEDURE IF EXISTS fn_calculate_employee_revenue;

-- Create the stored procedure
DELIMITER $$
CREATE PROCEDURE fn_calculate_employee_revenue(IN employee_id INT)
BEGIN
    DECLARE total_revenue DECIMAL(10, 2) DEFAULT 0;
    DECLARE order_total DECIMAL(10, 2);
    DECLARE done INT DEFAULT 0;

    -- Declare a cursor to fetch orders processed by the employee
    DECLARE order_cursor CURSOR FOR
        SELECT o.total_price
        FROM orders o
        JOIN employees e ON o.order_id = e.employee_id -- Assuming employees process orders
        WHERE e.employee_id = employee_id;

    -- Declare a handler for the end of the cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Open the cursor
    OPEN order_cursor;

    -- Loop through the cursor
    order_loop: LOOP
        FETCH order_cursor INTO order_total;
        IF done = 1 THEN
            LEAVE order_loop;
        END IF;
        SET total_revenue = total_revenue + order_total;
    END LOOP;

    -- Close the cursor
    CLOSE order_cursor;

    -- Print the total revenue
    SELECT CONCAT('Total revenue generated by employee ', employee_id, ' is $', total_revenue) AS result;
END$$
DELIMITER ;

-- Call the stored procedure for employee_id = 1
CALL fn_calculate_employee_revenue(1);

-- MULTI TABLE QUERY --

-- Select relevant customer and order details along with total order value
SELECT 
    c.customer_id,  -- Customer ID
    c.first_name AS customer_first_name,  -- Customer first name
    c.last_name AS customer_last_name,  -- Customer last name
    o.order_id,  -- Order ID
    o.order_date,  -- Date when the order was placed
    SUM(od.quantity * mi.price) AS total_order_value,  -- Total value of the order (calculated)
    COUNT(od.menu_item_id) AS total_items_ordered  -- Total number of different items in the order
FROM customers c

-- Join the orders table to get customer orders
JOIN orders o ON c.customer_id = o.customer_id

-- Join the order_details table to get item quantities per order
JOIN order_details od ON o.order_id = od.order_id

-- Join the menu_items table to get the price of each menu item
JOIN menu_items mi ON od.menu_item_id = mi.menu_item_id

-- Group by customer and order to summarize total spending per order
GROUP BY c.customer_id, c.first_name, c.last_name, o.order_id, o.order_date

-- Filter to show only orders where the total value is greater than $5
HAVING total_order_value > 5

-- Sort results in descending order based on total order value
ORDER BY total_order_value DESC;